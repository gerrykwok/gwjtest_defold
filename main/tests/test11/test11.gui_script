require("main.common.MiscUtil")
local gwjui = require("gwjui.gwjui")
local TipsBanner = require("main.common.tipsbanner.tipsbanner")

function init(self)
	msg.post(".", "acquire_input_focus")
	self.m_input = gwjui.input.createInstance()
	--郭伟基测试listview
	local maxItemType = 5
	--list1 ---------------------------------------------------------------------
	local listview = gwjui.UIListView.createInstance({
		main_id = "list1",
		direction = gwjui.UIListView.DIRECTION_VERTICAL,
	})
	listview:onTouch(function(event)
		if(event.name == "clicked") then
			ccprint("clicked:%d", event.itemPos)
			local str = string.format("clicked1:%d", event.itemPos)
			TipsBanner.show(str)
		else
--			dump(event, "listview touch")
		end
	end)
	for i=1,5 do
		local item = listview:addItem(string.format("list_item%d", math.modf((i-1)%maxItemType)+1))
	end
	listview:reload()
	--list2 ---------------------------------------------------------------------
	local listview = gwjui.UIListView.createInstance({
		main_id = "list2",
		direction = gwjui.UIListView.DIRECTION_VERTICAL,
	})
--	listview:setBounceable(false)
	listview:onTouch(function(event)
		if(event.name == "clicked") then
			ccprint("clicked:%d", event.itemPos)
			local str = string.format("clicked2:%d", event.itemPos)
			TipsBanner.show(str)
		else
--			dump(event, "listview touch")
		end
	end)
	for i=1,20 do
		local idx = math.modf((i-1)%maxItemType)+1
		local itemId = string.format("list_item%d", idx)
		local wh = gui.get_size(gui.get_node(itemId))
		local item = listview:addItem(itemId, wh.x, wh.y+20, function(clones)
--			dump(clones, "clones")
			local text = clones[string.format("idx%d", idx)]
			if(text) then
				gui.set_text(text, string.format("%d:", i))
			end
		end)
	end
	listview:reload()
	--list3 ---------------------------------------------------------------------
	local list3 = gwjui.UIListView.createInstance({
		main_id = "list3",
		direction = gwjui.UIListView.DIRECTION_HORIZONTAL,
	})
	list3:onTouch(function(event)
		if(event.name == "clicked") then
			ccprint("clicked:%d", event.itemPos)
			local str = string.format("clicked3:%d", event.itemPos)
			TipsBanner.show(str)
		else
--			dump(event, "listview touch")
		end
	end)
	for i=1,20 do
		local item = list3:addItem(string.format("list_item%d", math.modf((i-1)%maxItemType)+1))
--		item.width = item.width + 10
	end
	list3:reload()
	--button1 -----------------------------------------------------------------------
	local btn = gwjui.UIPushButton.createInstance({
		main_id = "button1",
	})
	btn:onButtonPressed(function()
		ccprint("button1 pressed")
	end)
	:onButtonReleased(function()
		ccprint("button1 released")
	end)
	:onButtonClicked(function()
		TipsBanner.show("button1 clicked")
	end)
	--button2 -----------------------------------------------------------------------
	local btn = gwjui.ScaleButton.createInstance({
		main_id = "button2",
		maxScale = 1.1,
	})
	:onButtonClicked(function()
		TipsBanner.show("button2 clicked")
	end)
	--button3 -----------------------------------------------------------------------
--	local btn = gwjui.PushButton.createInstance({
--		main_id = "button3/btn_bg",
--		normal_id = "button3/btn_normal",
--		clicked_id = "button3/btn_clicked",
--	})
--	:onButtonClicked(function()
--		TipsBanner.show("button3 clicked")
--	end)
	local btn = gwjui.DarkenButton.new({
		main_id = "button3/btn_bg",
	})
	:onButtonClicked(function()
		TipsBanner.show("button3 clicked")
	end)
--	btn:setVisible(false)
	--input1 -----------------------------------------------------------------------
	local input = gwjui.UIInput.new({
		main_id = "input_box1",
		text = "测试一下",
		textColor = vmath.vector4(1, 0, 0, 1),
		textFont = "test_24",
		listener = function(event, edit)
			ccprint("edit event:%s text=%s", tostring(event), edit:getText())
		end,
	})
	--input2 -----------------------------------------------------------------------
	local input = gwjui.UIInput.new({
		main_id = "input_box2",
		text = "test",
		textColor = vmath.vector4(0, 1, 0, 1),
		textFont = "test_16",
		keyboardType = gui.KEYBOARD_TYPE_NUMBER_PAD,
	})
end

function final(self)
	self.m_input:final()
end

function update(self, dt)
	self.m_input:onUpdate(dt)
end

function on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
	self.m_input:onInput(action_id, action)
end

function on_reload(self)
end
