require("main.common.MiscUtil")
local gwjui = require("gwjui.gwjui")
local Constants = require("main.common.constants")

--以下语句为了defold能把.lua打包
local alltest =
{
	require("main.tests.test01.name"),
	require("main.tests.test02.name"),
	require("main.tests.test03.name"),
	require("main.tests.test04.name"),
	require("main.tests.test05.name"),
	require("main.tests.test06.name"),
	require("main.tests.test07.name"),
	require("main.tests.test08.name"),
	require("main.tests.test09.name"),
	require("main.tests.test10.name"),
	require("main.tests.test11.name"),
	require("main.tests.test12.name"),
	require("main.tests.test13.name"),
	require("main.tests.test14.name"),
	require("main.tests.test15.name"),
	require("main.tests.test16.name"),
	require("main.tests.test17.name"),
	require("main.tests.test18.name"),
	require("main.tests.test19.name"),
}

function init(self)
	msg.post(".", "acquire_input_focus")
	self.m_input = gwjui.input.createInstance()

	self.m_listData = {}
	for i,test in ipairs(alltest) do
		local str = string.format("%d.%s", i, test)
		table.insert(self.m_listData, str)
	end
	--list
	local contentDown = nil
	local listview = gwjui.UIListView.new({
		main_id = "list_test",
		direction = gwjui.UIListView.DIRECTION_VERTICAL,
	})
	listview:onTouch(function(event)
		if(event.name == "clicked") then
			--ccprint("clicked:%d", event.itemPos)
			--msg.post("main:/go", "gotoTest", {name=event.itemPos})
		elseif(event.name == "moved") then
			if(contentDown) then
				gui.animate(contentDown, "scale", vmath.vector3(1, 1, 1), gui.EASING_LINEAR, 0.2)
				contentDown = nil
			end
		end
	end)
	local viewRect = listview:getViewRect()
	for i,test in ipairs(self.m_listData) do
		local item = listview:newItem()

		local content = gui.new_text_node(vmath.vector3(), test)
		gui.set_font(content, "test_32")
		item:addContent(content)
		local obj = gwjui.UIPushButton.new({
			main_node = content,
		})
		obj:setTouchSwallowEnabled(false)
		obj:onButtonPressed(function()
			contentDown = content
			gui.animate(contentDown, "scale", vmath.vector3(1.1, 1.1, 1), gui.EASING_LINEAR, 0.2)
		end)
		obj:onButtonClicked(function()
			if(not listview:isContentMoved()) then
				gwjui.printf("gwjgwj,goto test %d", i)
				msg.post("main:/go", "gotoTest", {name=i})
			end
		end)

		item:setItemSize(viewRect.width, 60)
		listview:addItem(item)
	end
	listview:reload()
	--退出按钮
	local btnExit = gwjui.ScaleButton.new({
		main_id = "exit/bg",
		maxScale = 1.1,
	})
	:onButtonClicked(function()
		ccprint("gwjgwj,exit prog")
		msg.post("@system:", "exit", {code=0})--os.exit()
--		msg.post("@system:", "reboot")
	end)
end

function final(self)
	self.m_input:final()
end

function update(self, dt)
	self.m_input:onUpdate(dt)
end

function on_message(self, message_id, message, sender)
	self.m_input:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	if(action_id) then
		--gwjui.printf("on_input:%s,pressed:%s,released:%s", tostring(action_id), tostring(action.pressed), tostring(action.released))
	end
	self.m_input:onInput(action_id, action)
	if(action_id == Constants.ACTION_ANDROID_BACK and action.released) then
		msg.post("@system:", "exit", {code=0})
	end
end

function on_reload(self)
end
